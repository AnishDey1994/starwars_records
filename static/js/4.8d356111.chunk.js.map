{"version":3,"sources":["components/UX-Table/UXTable.jsx","components/UX-Select/UXSelect.jsx","components/UX-TextBox/UXTextBox.jsx","components/UX-Button/UXButton.jsx","components/UX-AlertBox/UXAlertBox.jsx","widgets/ShowRecordsWidget/showRecords.jsx"],"names":["UXTable","props","getSpecies","url","speciesName","axios","get","then","res","response","data","name","console","log","catch","err","Table","responsive","bordered","striped","hover","variant","id","className","tableBody","length","map","trItem","k","species","birth_year","gender","height","mass","skin_color","hair_color","eye_color","Date","created","toUTCString","edited","colSpan","memo","UXSelect","value","class","onChange","e","onSelect","disabled","multiple","optionArray","option","prototype","PropTypes","isRequired","string","array","bool","func","UXTextBox","type","placeholder","placeHolder","onEnter","UXButton","onClick","onTap","UXAlertBox","alertType","alertMessage","configString","ShowRecords","useState","isLoading","setLoader","records","setRecords","fetchError","setFetchError","searchText","setSearchText","sortField","setSortField","pageNo","setPageNo","getRecords","results","message","finally","handlePagination","direction","useEffect","sortOption","field","sortedData","tempRecords","subStr","trim","split","sort","a","b","handleSort","target","UXLoader","loaderType","tableHeader","recordData"],"mappings":"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","file":"static/js/4.8d356111.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport axios from 'axios';\r\nimport { Table } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    FaAndroid,\r\n    FaUserCircle,\r\n    FaQuestionCircle\r\n} from 'react-icons/fa';\r\nimport './UXTable.scss';\r\n\r\nconst UXTable = props => {\r\n    const getSpecies = (url) => {\r\n        let speciesName;\r\n        axios.get(url)\r\n            .then((res) => {\r\n                let response = res.data;\r\n                if (response && response.name) {\r\n                    console.log(response.name);\r\n                    speciesName = response.name;\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        return speciesName;\r\n    }\r\n    return (\r\n        <div>\r\n            <Table responsive bordered striped hover variant='dark' id='dataTable'>\r\n                <thead>\r\n                    <tr className='toMiddle'>\r\n                        <th className='toMiddle'>Icon</th>\r\n                        <th>Name</th>\r\n                        <th>DOB</th>\r\n                        <th>Gender</th>\r\n                        <th>Height</th>\r\n                        <th>Mass</th>\r\n                        <th>Skin color</th>\r\n                        <th>Hair color</th>\r\n                        <th>Eye color</th>\r\n                        <th>Created</th>\r\n                        <th>Edited</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.tableBody && props.tableBody.length > 0 ?\r\n                            props.tableBody.map((trItem, k) => (\r\n                                <tr key={k} className='toMiddle'>\r\n                                    <td>\r\n                                        {\r\n                                            trItem.species.length > 0 ?\r\n                                                getSpecies(trItem.species[0])\r\n                                                : <FaQuestionCircle />\r\n                                        }\r\n                                    </td>\r\n                                    <td>{trItem.name}</td>\r\n                                    <td>{trItem.birth_year}</td>\r\n                                    <td>{trItem.gender}</td>\r\n                                    <td>{trItem.height}</td>\r\n                                    <td>{trItem.mass}</td>\r\n                                    <td>{trItem.skin_color}</td>\r\n                                    <td>{trItem.hair_color}</td>\r\n                                    <td>{trItem.eye_color}</td>\r\n                                    <td>{new Date(trItem.created).toUTCString()}</td>\r\n                                    <td>{new Date(trItem.edited).toUTCString()}</td>\r\n                                </tr>\r\n                            ))\r\n                            :\r\n                            <tr>\r\n                                <td colSpan='11'>No records found</td>\r\n                            </tr>\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n};\r\n\r\nUXTable.propTypes = {\r\n    //list of heading, should be an array\r\n    tableHeader: PropTypes.array,\r\n\r\n    //array of object. table data\r\n    tableBody: PropTypes.array,\r\n};\r\n\r\nexport default memo(UXTable);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './UXSelect.scss';\r\nconst UXSelect = (props) => {\r\n    return (\r\n        <select\r\n            id={props.id && props.id}\r\n            name={props.name && props.name}\r\n            value={props.value && props.value}\r\n            className={`form-control ${props.class ? props.class : ''}`}\r\n            onChange={(e) => props.onSelect(e)}\r\n            disabled={props.disabled && props.disabled}\r\n            multiple={props.multiple && props.multiple}\r\n        >\r\n            <option value=''> --- Select ---</option>\r\n            {props.optionArray.length > 0 && props.optionArray.map((option, k) => (\r\n                <option key={k} value={option.value}>{option.name}</option>\r\n            ))}\r\n        </select>\r\n    );\r\n};\r\n\r\nUXSelect.prototype = {\r\n    //ID require field\r\n    id: PropTypes.isRequired,\r\n\r\n    //Name require field\r\n    name: PropTypes.string,\r\n\r\n    //array of object. First value should be filed name and second value should be input value\r\n    optionArray: PropTypes.array.isRequired,\r\n\r\n    //disable flag       \r\n    disabled: PropTypes.bool,\r\n\r\n    //function for select value \r\n    onSelect: PropTypes.func,\r\n\r\n    //multiple flag\r\n    multiple: PropTypes.bool\r\n}\r\nexport default UXSelect;","import React from 'react';\r\nimport './UXTextBox.scss';\r\n\r\nconst UXTextBox = (props) => {\r\n    console.log('text props', props);\r\n    return (\r\n        <input\r\n            id={props.id && props.id}\r\n            name={props.name && props.name}\r\n            type={props.type && props.type}\r\n            value={props.value && props.value}\r\n            placeholder={props.placeHolder && props.placeHolder}\r\n            className={`form-control ${props.class ? props.class : ''}`}\r\n            onChange={(e) => props.onEnter(e)}\r\n            disabled={props.disabled && props.disabled}\r\n        >\r\n        </input>\r\n    );\r\n};\r\n\r\nexport default UXTextBox;","import React from 'react';\r\nimport './UXButton.scss';\r\nconst UXButton = (props) => {\r\n    return (\r\n        <button\r\n            id={props.id && props.id}\r\n            type={props.type && props.type}\r\n            className={`btn ${props.class ? props.class : ''}`}\r\n            onClick={props.onTap && props.onTap}\r\n            disabled={props.disabled && props.disabled}\r\n        >\r\n            {props.value && props.value}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default UXButton;","import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './UXAlertBox.scss';\r\n\r\nconst UXAlertBox = (props) => {\r\n    return (\r\n        <div className={`alertBox ${props.alertType && props.alertType}`}>\r\n            <span>{props.alertMessage && props.alertMessage}</span>\r\n        </div>\r\n    );\r\n};\r\nUXAlertBox.propTypes = {\r\n    alertMessage: PropTypes.string,\r\n    alertType: PropTypes.string\r\n};\r\n\r\nexport default memo(UXAlertBox);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport { FaAngleRight, FaAngleLeft } from 'react-icons/fa';\r\nimport UXTable from '../../components/UX-Table/UXTable';\r\nimport UXLoader from '../../components/UX-Loader/UXLoader';\r\nimport UXSelect from '../../components/UX-Select/UXSelect';\r\nimport UXTextBox from '../../components/UX-TextBox/UXTextBox';\r\nimport UXButton from '../../components/UX-Button/UXButton';\r\nimport UXAlertBox from '../../components/UX-AlertBox/UXAlertBox';\r\nimport data from './configString.json';\r\nimport './showRecords.scss';\r\nconst configString = data;\r\n\r\nconst ShowRecords = () => {\r\n    const [isLoading, setLoader] = useState(false);\r\n    const [records, setRecords] = useState(null);\r\n    const [fetchError, setFetchError] = useState(null);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [sortField, setSortField] = useState('');\r\n    const [pageNo, setPageNo] = useState(1);\r\n\r\n    const getRecords = () => {\r\n        setLoader(true);\r\n        axios.get(`https://swapi.dev/api/people/?search=${searchText}&page=${pageNo}`)\r\n            .then((res) => {\r\n                setRecords(res.data && res.data.results);\r\n            }).catch((err) => {\r\n                setFetchError(err.message);\r\n            }).finally(() => {\r\n                setLoader(false);\r\n            })\r\n    }\r\n    const handleSort = (field) => {\r\n        setSortField(field);\r\n        let tempRecords = [...records];\r\n        let subStr = field.trim().split('-');\r\n        let sortedData;\r\n        if (subStr[1] === 'ascending') {\r\n            if (subStr[0] === 'name') {\r\n                sortedData = tempRecords.sort(function (a, b) {\r\n                    if (a[subStr[0]] < b[subStr[0]]) { return -1; }\r\n                    if (a[subStr[0]] > b[subStr[0]]) { return 1; }\r\n                    return 0;\r\n                });\r\n            } else {\r\n                sortedData = tempRecords.sort((a, b) => {\r\n                    return a[subStr[0]] - b[subStr[0]]\r\n                });\r\n            }\r\n        } else {\r\n            if (subStr[0] === 'name') {\r\n                sortedData = tempRecords.sort(function (a, b) {\r\n                    if (a[subStr[0]] > b[subStr[0]]) { return -1; }\r\n                    if (a[subStr[0]] < b[subStr[0]]) { return 1; }\r\n                    return 0;\r\n                });\r\n            } else {\r\n                sortedData = tempRecords.sort((a, b) => {\r\n                    return b[subStr[0]] - a[subStr[0]]\r\n                });\r\n            }\r\n        }\r\n        setRecords(sortedData);\r\n        console.log(sortedData, records);\r\n    }\r\n    const handleSearch = () => {\r\n        setSortField('');\r\n        getRecords();\r\n    }\r\n    const handlePagination = (direction) => {\r\n        if (direction === 'prev') {\r\n            if (pageNo > 1) {\r\n                setPageNo(pageNo - 1);\r\n            }\r\n        } else {\r\n            if (pageNo < 10) {\r\n                setPageNo(pageNo + 1);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRecords();\r\n    }, [pageNo])\r\n    return (\r\n        <div className='container showRecordWrapper'>\r\n            <div className='tableController'>\r\n                <div className='sortingController'>\r\n                    <UXSelect\r\n                        id='selectSorting'\r\n                        class='selectSorting'\r\n                        value={sortField}\r\n                        optionArray={configString.sortOption}\r\n                        onSelect={(e) => handleSort(e.target.value)}\r\n                    ></UXSelect>\r\n                </div>\r\n                <div className='offsetCon'></div>\r\n                <div className='searchController'>\r\n                    <UXTextBox\r\n                        id='searchTextBox'\r\n                        class='searchTextBox'\r\n                        type='search'\r\n                        value={searchText}\r\n                        placeHolder='type here'\r\n                        onEnter={(e) => setSearchText(e.target.value)}\r\n                    >\r\n                    </UXTextBox>\r\n                    <UXButton\r\n                        id='searchButton'\r\n                        type='button'\r\n                        class='btn-primary'\r\n                        value='search'\r\n                        onTap={() => handleSearch()}\r\n                    >\r\n                    </UXButton>\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                isLoading ? <UXLoader loaderType='img' />\r\n                    : records ?\r\n                        <UXTable\r\n                            tableHeader={configString.recordData.tableHeader}\r\n                            tableBody={records}\r\n                        >\r\n                        </UXTable>\r\n                        : fetchError ?\r\n                            <UXAlertBox alertMessage={fetchError} alertType='error' />\r\n                            : <UXAlertBox alertMessage={'Some Error Occured'} alertType='error' />\r\n            }\r\n            <div className='paginationWrapper'>\r\n                <div onClick={() => handlePagination('prev')}><FaAngleLeft /> Prev</div>\r\n                <div onClick={() => handlePagination('next')}> Next <FaAngleRight /></div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowRecords;"],"sourceRoot":""}